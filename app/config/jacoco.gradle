apply plugin: 'jacoco'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    sleep(45*1000)

    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}
//
//apply plugin: 'jacoco'
//
//jacoco {
//    toolVersion = '0.8.1'
//}
//
//tasks.withType(Test) {
//    jacoco.includeNoLocationClasses = false
//}
//
//task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
//    description = 'Generate JaCoCo coverage reports'
//
//    doFirst {
//        files('build/intermediates/classes/debug').getFiles().each { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }
//
//    classDirectories = fileTree(
//            dir: "${buildDir}/intermediates/classes/debug",
//            excludes: ['**/R.class',
//                       '**/R$*.class',
//                       '**/*$ViewInjector*.*',
//                       '**/*$ViewBinder*.*',
//                       '**/BuildConfig.*',
//                       '**/Manifest*.*',
//                       '**/*GlideRequest*.*',
//                       '**/*GlideApp*.*',
//                       '**/*GlideOptions*.*',
//                       '**/*GeneratedAppGlideModuleImpl*.*',
//                       '**/*GeneratedRequestManagerFactory*.*',
//                       '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
//                       '**/*$inlined$*.*', // Kotlin specific, Jacoco can not handle several "$" in class name.
//                       '**/*Module.*', // Modules for Dagger.
//                       '**/*Dagger*.*', // Dagger auto-generated code.
//                       '**/*MembersInjector*.*', // Dagger auto-generated code.
//                       '**/*_Provide*Factory*.*'] // Dagger auto-generated code.
//    )
//
//    def coverageSourceDirs = [
//            "${project.projectDir}/src/main/java",
//            "${project.projectDir}/src/debug/java"
//    ]
//
//    additionalSourceDirs = files(coverageSourceDirs)
//    sourceDirectories = files(coverageSourceDirs)
//    executionData = fileTree(
//            dir: "$buildDir",
//            include: ["outputs/code-coverage/connected/*coverage.ec"]
//    )
//
//    reports {
//        xml.enabled = true
//        html.enabled = false
//        xml.destination file("build/reports/myReport.xml")
//    }
//}

//task jacocoTestReport(type: JacocoReport) {
//    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
//
////    subprojects.each {
////        sourceSets it.sourceSets.main
////    }
//
//    reports {
//        xml.enabled true
//        xml.destination file("${buildDir}/reports/jacoco/report.xml")
//        html.enabled false
//        csv.enabled false
//    }
//}

// task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
//    description = 'Generate JaCoCo coverage reports'
//
//    doFirst {
//        files('build/intermediates/classes/debug').getFiles().each { file ->
//            if (file.name.contains('$$')) {
//                file.renameTo(file.path.replace('$$', '$'))
//            }
//        }
//    }
//
//    classDirectories = fileTree(
//            dir: "${buildDir}/intermediates/classes/debug",
//            excludes: ['**/R.class',
//                       '**/R$*.class',
//                       '**/*$ViewInjector*.*',
//                       '**/*$ViewBinder*.*',
//                       '**/BuildConfig.*',
//                       '**/Manifest*.*',
//                       '**/*GlideRequest*.*',
//                       '**/*GlideApp*.*',
//                       '**/*GlideOptions*.*',
//                       '**/*GeneratedAppGlideModuleImpl*.*',
//                       '**/*GeneratedRequestManagerFactory*.*',
//                       '**/*$Lambda$*.*', // Jacoco can not handle several "$" in class name.
//                       '**/*$inlined$*.*', // Kotlin specific, Jacoco can not handle several "$" in class name.
//                       '**/*Module.*', // Modules for Dagger.
//                       '**/*Dagger*.*', // Dagger auto-generated code.
//                       '**/*MembersInjector*.*', // Dagger auto-generated code.
//                       '**/*_Provide*Factory*.*'] // Dagger auto-generated code.
//    )
//
//    def coverageSourceDirs = [
//            "${project.projectDir}/src/main/java",
//            "${project.projectDir}/src/debug/java"
//    ]
//
//    additionalSourceDirs = files(coverageSourceDirs)
//    sourceDirectories = files(coverageSourceDirs)
//    executionData = fileTree(
//            dir: "$buildDir",
//            include: ["jacoco/testDebugUnitTest.exec"]
//    )
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//    }
//}