# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/android:api-28-node8-alpha
        environment:
              # Customize the JVM maximum heap limit
              JVM_OPTS: -Xmx3200m
              TERM: dumb
              CC_TEST_REPORTER_ID: f0fbf63a31dc58d479511481daeb30e5fe79997751b96720a47547f03f0eb8c4


      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo


    steps:
      - checkout
      - restore_cache:
                key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}
      #      - run:
      #         name: Chmod permissions #if permission for Gradlew Dependencies fail, use this.
      #         command: sudo chmod +x ./gradlew
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: jars-{{ checksum "build.gradle" }}-{{ checksum  "app/build.gradle" }}

      - run:
          name: Setup emulator
          command: sdkmanager "system-images;android-22;default;armeabi-v7a" && echo "no" | avdmanager create avd -n test -k "system-images;android-22;default;armeabi-v7a"
      - run:
          name: Launch emulator
          command: export LD_LIBRARY_PATH=${ANDROID_HOME}/emulator/lib64:${ANDROID_HOME}/emulator/lib64/qt/lib && emulator64-arm -avd test -noaudio -no-boot-anim -no-window -accel on
          background: true
      - run:
          name: Wait emulator
          command: |
            # wait for it to have booted
            circle-android wait-for-boot
            # unlock the emulator screen
            sleep 30
            adb shell input keyevent 82

      - run:
          name: Run Tests
          command: ./gradlew lint test

      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

#      - run:
#          name: Generate JaCoCo report
#          command: ./gradlew clean jacocoTestReportDebug
#      - run:
#          name: Upload coverage to code climate
#          command: |
#            JACOCO_SOURCE_PATH=app/src/main/java
#            ./cc-test-reporter --debug format-coverage app/build/reports/jacoco/debug/jacoco.xml -t jacoco --prefix /home/rof/src/github.com/simiyu1/JavaDevsNairobi/blob/ft-share-profile-156008359
#            ./cc-test-reporter --debug upload-coverage

      - run:
          name: Generate JaCoCo report
          command: ./gradlew -PciBuild=true clean jacocoTestReportDebug

      - run:
          name: Upload coverage report to CodeCov
          command: bash <(curl -s https://codecov.io/bash)

      - store_artifacts:
          path: collect_app/build/reports/
          destination: /reports/

      - store_test_results:
          path: app/build/test-results

"Execute tests on Ubuntu":
    environment:
      CIRCLE_TEST_REPORTS: ~/test-reports
      LC_ALL: C.UTF-8
      LANG: C.UTF-8
      FASTLANE_ITUNES_TRANSPORTER_PATH: .bundle
    docker:
      - image: fastlanetools/fastlane:2.3.4
    steps:
      - checkout

      - restore_cache:
          key: v1-ubuntu-gems-{{ checksum "Gemfile" }}-{{ checksum "fastlane.gemspec" }}
      - run:
          name: Setup Build
          command: |
            mkdir -p ~/test-reports
            bundle check --path .bundle || bundle install --jobs=4 --retry=3 --path .bundle
      - save_cache:
          key: v1-ubuntu-gems-{{ checksum "Gemfile" }}-{{ checksum "fastlane.gemspec" }}
          paths:
            - .bundle

      - run:
          name: Check PR Metadata
          command: bundle exec danger || echo "danger failed"

      - restore_cache:
          key: v1-{{ arch }}-rubocop

      - run: bundle exec fastlane slackbuild

      - save_cache:
          key: v1-{{ arch }}-rubocop
          paths:
            - ~/.cache/rubocop_cache
      - store_test_results:
          path: ~/test-reports
      - store_artifacts:
          path: ~/test-reports/rspec
          destination: test-reports

      - run:
          name: Post Test Results to GitHub
          command: bundle exec danger || echo "danger failed"
          when: always # Run this even when tests fail
